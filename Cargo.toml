[package]
name = "tmux-revive"
version = "0.1.0"
edition = "2021"
description = "A tmux plugin for saving & restoring your Tmux environment."
readme = "README.md"

license = "MIT"
authors = ["graelo <graelo@grael.cc>"]
repository = "https://github.com/graelo/tmux-revive"
homepage = "https://github.com/graelo/tmux-revive"
documentation = "https://docs.rs/tmux-revive"

keywords = ["tmux", "tmux-plugin", "tmux-resurrect", "backup"]
categories = ["command-line-utilities"]
exclude = ["/.github", "/ci", "/.travis.yml", "/appveyor.yml"]

[dependencies]
clap = { version = "3.2.16", features = ["derive", "env"] }

anyhow = "1"
thiserror = "1"

regex = "1.4"

# waiting for https://doc.rust-lang.org/std/primitive.slice.html#method.group_by
itertools = "0.10.3"

futures = "0.3"
async-std = { version = "1", features = ["unstable"] }

# backup serialization
tar = "0.4.38"
zstd = "0.11.2"
serde = { version = "1.0", features = ["derive"] }
serde_yaml = "0.9"
chrono = "0.4.19"
clap_complete = "3.2.3"

[profile.release]
# Enable link-time optimization (LTO). It’s a kind of whole-program or
# inter-module optimization as it runs as the very last step when linking the
# different parts of your binary together. You can think of it as allowing
# better inlining across dependency boundaries (but it’s of course more
# complicated that that).
#
# Rust can use multiple linker flavors, and the one we want is “optimize across
# all crates”, which is called “fat”. To set this, add the lto flag to your
# profile:
lto = "fat"

# To speed up compile times, Rust tries to split your crates into small chunks
# and compile as many in parallel as possible. The downside is that there’s
# less opportunities for the compiler to optimize code across these chunks. So,
# let’s tell it to do one chunk per crate:
codegen-units = 1

# Rust by default uses stack unwinding (on the most common platforms). That
# costs performance, so let’s skip stack traces and the ability to catch panics
# for reduced code size and better cache usage:
panic = "abort"
